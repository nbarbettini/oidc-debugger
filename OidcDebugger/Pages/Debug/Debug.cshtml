@page "/debug"
@model DebugModel

@{
    var tenant = HttpContext.GetMultiTenantContext<AppTenantInfo>().TenantInfo!;

    ViewData["Title"] = "Debug a request";
}

<partial name="_ServerInfo" />

<div id="debug-view">
    <div class="container debug__callback" id="debug-view-component">
        <h2 class="pull-right">
            <a href="/">
                <i class="fa fa-repeat" aria-hidden="true"></i>
                Start over
            </a>
        </h2>

        <div class="debug__callback-header" v-if="success">
            <h1 class="green-text">
                <i class="fa fa-check-circle" aria-hidden="true"></i>
                <b>Success!</b>
            </h1>

            <h2 class="h4-responsive">
                The flow was successful.
                <span v-if="flow === 'code'">
                    The authorization server responded with an authorization code because the flow was started with
                    the <code>code</code> response type.
                </span>
                <span v-if="flow === 'implicit'">
                    The authorization server responded with tokens because the flow was started with the
                    implicit {{savedResponseType ? '(' + savedResponseType + ')' : ''}} response type.
                </span>
            </h2>

            <h2 class="h4-responsive" v-show="state.exists">
                The returned state is <code>{{state.value}}</code>.
                <template v-if="expectedState">
                    <span class="green-text" v-show="state.value === expectedState">
                        <i class="fa fa-check-circle" aria-hidden="true"></i>
                        Matches the original state
                    </span>
                    <span class="orange-text" v-show="state.value !== expectedState">
                        <i class="fa fa-exclamation-triangle" aria-hidden="true"></i>
                        Does not match the original state: <code>{{expectedState}}</code>
                    </span>
                </template>
            </h2>

            <code-card title="Authorization code" class="success"
                       v-show="flow === 'code'"
                       v-bind:value="code.value">
                {{code.value}}
            </code-card>

            <code-card title="Access token" class="success"
                       v-show="accessToken.exists"
                       v-bind:value="accessToken.value">
                {{accessToken.value}}
            </code-card>

            <decoded-token-card title="Access token (decoded)"
                                class="success"
                                v-show="accessToken.exists"
                                v-bind:value="accessToken.value">
                {{accessToken.value}}
            </decoded-token-card>

            <code-card title="ID token" class="success"
                       v-show="idToken.exists"
                       v-bind:value="idToken.value">
                {{idToken.value}}
            </code-card>

            <decoded-token-card title="ID token (decoded)"
                                class="success"
                                v-show="idToken.exists"
                                v-bind:value="idToken.value">
                {{idToken.value}}
            </decoded-token-card>
        </div>

        <div class="debug__callback-header" v-if="!success">
            <h1 class="red-text">
                <i class="fa fa-exclamation-triangle" aria-hidden="true"></i>
                <b>Error</b>
            </h1>
            <h2 class="h4-responsive">
                The authorization server responded with an error. This could mean that the request parameters were incorrect, or that the user rejected the authorization.
            </h2>

            <code-card class="error"
                       v-bind:title="error.value ? 'Error: ' + error.value : 'Error'"
                       v-bind:value="errorDescription.value">
                {{safeUnescape(errorDescription.value) || '(no error description)'}}
            </code-card>
        </div>

        <div class="debug__callback-info" v-if="success && flow === 'code'">
            <h3 class="h5-responsive orange-text">Step 2: Exchange code for tokens</h3>

            <div v-if="usePkce">
                <p>
                    Now you need to exchange the authorization code for tokens using the token endpoint.
                    Since this flow was started with a PKCE Code Challenge, we can perform the token exchange directly in the
                    browser for you.
                </p>

                <code-card title="PKCE result" class="success"
                           v-if="pkceSuccess"
                           v-bind:value="pkceResponse">
                    <template v-for="(value, propName) in pkceResponse">
                        <span class="code-line">{{propName}}=<span class="light-blue-text">{{value}}</span></span>
                    </template>
                </code-card>

                <code-card class="error"
                           v-if="pkceError.error"
                           v-bind:title="pkceError.error ? 'Error: ' + pkceError.error : 'Error'"
                           v-bind:value="pkceError.error_description">
                    {{safeUnescape(pkceError.error_description) || '(no error description)'}}
                </code-card>

            </div>

            <div v-if="!usePkce">
                <p>
                    Now you need to exchange the authorization code for tokens using the token endpoint.
                    We can't do this step for you because it involves your client secret.
                </p>

                <code-card class="next-step">
                    <span class="code-line">POST <span v-bind:class="{ 'orange-text': !tokenEndpoint }">{{tokenEndpoint || '{tokenEndpoint}'}}</span></span>
                    <span class="code-line">Content-Type: application/x-www-form-urlencoded</span>
                    <span class="code-line">&nbsp;</span>
                    <span id="token-request-body">
                        <span class="code-line">grant_type=authorization_code&amp;</span>
                        <span class="code-line">code=<span class="light-blue-text">{{code.value}}</span>&amp;</span>
                        <span class="code-line">client_id=<span v-bind:class="{ 'orange-text': !savedClientId, 'light-blue-text': savedClientId }">{{savedClientId || '{clientId}'}}</span>&amp;</span>
                        <span class="code-line">client_secret=<span class="orange-text">{clientSecret}</span>&amp;</span>
                        <span class="code-line">redirect_uri=<span v-bind:class="{ 'orange-text': !savedRedirectUri, 'light-blue-text': savedRedirectUri }">{{encodeURIComponent(savedRedirectUri) || '{redirectUri}'}}</span></span>
                    </span>
                </code-card>

            </div>
        </div>

        <div class="debug__callback-info">
            <h3 class="h5-responsive">{{method | upper}} request details</h3>

            <code-card title="Form body values"
                       v-show="formBody.length > 0"
                       v-bind:value="reconstructedForm">
                <template v-for="param in formBody">
                    <span class="code-line">{{param.name}}=<span class="light-blue-text">{{param.value}}</span></span>
                </template>
            </code-card>

            <code-card title="?query values"
                       v-show="query.length > 0"
                       v-bind:value="rawQuery">
                <template v-for="param in query">
                    <span class="code-line">{{param.name}}=<span class="light-blue-text">{{param.value}}</span></span>
                </template>
            </code-card>

            <code-card title="#fragment values"
                       v-show="fragment.length > 0"
                       v-bind:value="rawFragment">
                <template v-for="param in fragment">
                    <span class="code-line">{{param.name}}=<span class="light-blue-text">{{param.value}}</span></span>
                </template>
            </code-card>
        </div>
    </div>
</div>

<environment names="Development">
    <script src="http://localhost:8080/OidcDebugger/wwwroot/bundle/Debug.js"></script>
</environment>
<environment names="Staging,Production">
    <script src="~/bundle/Debug.min.js" asp-append-version="true"></script>
</environment>
